FROM gfunkmonk/python:alpine-builddep AS squashme
SHELL ["/bin/bash", "-c"]

RUN apk update && apk add --no-cache pixman dtc gnutls glib zlib boost nettle && \
  apk add --no-cache --virtual .build-deps \ 
  build-base gcc g++ make nettle-dev \
  pixman-dev  dtc-dev gnutls-dev \
  libc-dev musl-dev openssl-dev \
  zlib-dev glib-dev \
  coreutils binutils boost-dev

#RUN git clone https://github.com/gfunkmonk/qemu && cd /qemu && \
RUN mkdir /qemu && cd /qemu && \
  curl -L https://github.com/gfunkmonk/qemu/archive/v2.5.0-pebble5b.tar.gz | tar xz --strip 1 && \
  ./configure \
     --extra-ldflags=-g \
     --enable-debug --disable-werror --target-list="arm-softmmu" \
     --disable-libiscsi --disable-libnfs --disable-libusb --disable-usb-redir \
#     --disable-strip --disable-xen --disable-kvm --disable-user --disable-docs \
     --disable-gtk --disable-linux-aio --disable-curl --disable-curses --disable-vhdx \
     --extra-cflags=-std=gnu99 \
#     --extra-cflags=-DSTM32_UART_NO_BAUD_DELAY \
#     --extra-cflags=-DSTM32_UART_ENABLE_OVERRUN \
     --enable-vnc \
     --disable-sdl \
	&& \
  make clean && \
  make -j4

# compiling an older version of boost, required for this version of V8
#RUN mkdir -p /boost && cd /boost && \
 # wget -O boost_1_58_0.tar.bz2 http://sourceforge.net/projects/boost/files/boost/1.58.0/boost_1_58_0.tar.bz2/download && \
 # tar -xvjf boost_1_58_0.tar.bz2 && \
 # rm *.tar.bz2 && cd /boost/boost_1_58_0 && \
 # ./bootstrap.sh && \
 # ./b2 install --prefix=/usr/local --with-python --with-thread && \
 # ldconfig && \
 # ldconfig /usr/local/lib

#RUN git clone https://github.com/pebble/pypkjs.git --depth 1 --branch v1.1.1 --recursive
RUN git clone https://github.com/gfunkmonk/pypkjs.git --depth 1 --branch master --recursive && \
  ln -s -f /usr/lib/libboost_system.so.1.69.0 /usr/lib/libboost_system.so.1.53.0 && \
  ln -s -f /usr/lib/libboost_system.so.1.70.0 /usr/lib/libboost_system.so.1.58.0 && \
  #ln -sf /usr/lib/libboost_python27.so /usr/lib/libboost_python.so 
  #cp libs/* /usr/lib/ && 
  pip install --no-cache virtualenv

RUN pip install greenlet gevent && cd /pypkjs/pypkjs/PyV8 && \
   git clone https://github.com/buffer/pyv8.git && cd build/ && \
   printf "V8_SNAPSHOT_ENABLED = False\nV8_GDB_JIT = True\nV8_BACKTRACE = False" > buildconf.py && \
   python setup.py build && python setup.py install

RUN virtualenv /pypkjs/.env && . /pypkjs/.env/bin/activate && pip install -r /pypkjs/requirements.txt

RUN mkdir /qemu-tintin-images && cd /qemu-tintin-images && curl -L https://github.com/pebble/qemu-tintin-images/archive/v4.3.tar.gz | tar xz --strip 1

ADD requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir -r /tmp/requirements.txt
RUN find /usr/local \
        \( -type d -a -name test -o -name tests \) \
        -o \( -type f -a -name '*.pyc' -o -name '*.pyo' \) \
        -exec rm -rf '{}' + \
    && runDeps="$( \
        scanelf --needed --nobanner --recursive /usr/local \
                | awk '{ gsub(/,/, "\nso:", $2); print "so:" $2 }' \
                | sort -u \
                | xargs -r apk info --installed \
                | sort -u \
    )" \
    && apk add --virtual .rundeps $runDeps \
    && apk del .build-deps

RUN rm -fr /boost
COPY . /code
FROM scratch
COPY --from=squashme / /
WORKDIR /code

ENV QEMU_DIR=/qemu QEMU_BIN=/qemu/arm-softmmu/qemu-system-arm PKJS_BIN=/pypkjs/phonesim.py \
  PKJS_VIRTUALENV=/pypkjs/.env QCON_PORT=80 QEMU_IMAGE_ROOT=/qemu-tintin-images

EXPOSE $QCON_PORT
CMD ["python", "controller.py"]
